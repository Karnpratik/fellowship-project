name: Build and Push Docker Images

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'frontend/**'
      - 'backend1/**'
      - 'backend2/**'
      - 'db/**'
      - '.github/workflows/**'  
  pull_request:
    branches:
      - dev
    paths:
      - 'frontend/**'
      - 'backend1/**'
      - 'backend2/**'
      - 'db/**'
      - '.github/workflows/**'  
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend1: ${{ steps.filter.outputs.backend1 }}
      backend2: ${{ steps.filter.outputs.backend2 }}
      db: ${{ steps.filter.outputs.db }}
    steps:
      - name: checkout code
        uses: action/checkout@v4

      - name: path changes filter
        uses: dorny/paths-filter@v3
        id: filter
        with: 
          filters: |
            frontend:
              - 'frontend/**'
            backend1:
              - 'backend1/**'
            backend2:
              - 'backend2/**'
            db:
              - 'db/**'  

  set-vars:
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.setvars.outputs.short_sha }}
    steps:
      - name: Set short SHA
        id: setvars
        run: echo "short_sha=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

  testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run React tests
        run: echo "test pass for now .... "

      - name: Conventional Commit checks
        uses: webiny/action-conventional-commits@v1.3.0
        with:
          allowed-commit-types: "feat,fix,docs,style,refactor,test,chore,ci,perf,revert"

  frontend: 
    needs:
      - changes 
      - testing
      - set-vars
    if: needs.changes.outputs.frontend == 'true'  
    runs-on: [v1]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set frontend image tag for prod
        if: github.ref_name == 'main'
        run: echo "IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-frontend:prod-${{ needs.set-vars.outputs.short_sha }}" >> $GITHUB_ENV

      - name: Set frontend image tag for dev
        if: github.ref_name == 'dev'
        run: echo "IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-frontend:dev-${{ needs.set-vars.outputs.short_sha }}" >> $GITHUB_ENV

      - name: Build and push frontend image
        uses: docker/setup-buildx-action@v3
        with:
          context: ./frontend/
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=local,src=/tmp/.cachebuild
          cache-to: type=local,dest=/tmp/.cachebuild-new

      - name: move updated docker cache
        run: |
          rm -rf /tmp/.cachebuild
          mv /tmp/.cachebuild-new /tmp/.cachebuild   

  backend1:
    needs:
      - changes
      - testing
      - set-vars
    if: needs.changes.outputs.backend1 == 'true'  
    runs-on: [v2]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set backend1 image tag for prod
        if: github.ref_name == 'main'
        run: echo "IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-backend1:prod-${{ needs.set-vars.outputs.short_sha }}" >> $GITHUB_ENV

      - name: Set backend1 image tag for dev
        if: github.ref_name == 'dev'
        run: echo "IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-backend1:dev-${{ needs.set-vars.outputs.short_sha }}" >> $GITHUB_ENV

      - name: Build and push backend1 image
        uses: docker/setup-buildx-action@v3
        with:
          context: ./backend1/
          file: ./backend1/Dockerfile
          push: true
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=local,src=/tmp/.cachebuild
          cache-to: type=local,dest=/tmp/.cachebuild-new

      - name: move updated docker cache
        run: |
          rm -rf /tmp/.cachebuild
          mv /tmp/.cachebuild-new /tmp/.cachebuild   

  backend2:
    needs:
      - changes
      - testing
      - set-vars
    if: needs.changes.outputs.backend2 == 'true'  
    runs-on: [v2]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set backend2 image tag for prod
        if: github.ref_name == 'main'
        run: echo "IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-backend2:prod-${{ needs.set-vars.outputs.short_sha }}" >> $GITHUB_ENV

      - name: Set backend2 image tag for dev
        if: github.ref_name == 'dev'
        run: echo "IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-backend2:dev-${{ needs.set-vars.outputs.short_sha }}" >> $GITHUB_ENV

      - name: Build and push backend2 image
        uses: docker/setup-buildx-action@v3
        with:
          context: ./backend2/
          file: ./backend2/Dockerfile
          push: true
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=local,src=/tmp/.cachebuild
          cache-to: type=local,dest=/tmp/.cachebuild-new

      - name: move updated docker cache
        run: |
          rm -rf /tmp/.cachebuild
          mv /tmp/.cachebuild-new /tmp/.cachebuild    

  database:
    needs:
      - changes
      - testing
      - set-vars
    if: needs.changes.outputs.db == 'true'  
    runs-on: [v1]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set database image tag for prod
        if: github.ref_name == 'main'
        run: echo "IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-database:prod-${{ needs.set-vars.outputs.short_sha }}" >> $GITHUB_ENV

      - name: Set database image tag for dev
        if: github.ref_name == 'dev'
        run: echo "IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-database:dev-${{ needs.set-vars.outputs.short_sha }}" >> $GITHUB_ENV

      - name: Build and push database image
        uses: docker/setup-buildx-action-action@v3
        with:
          context: ./db/
          file: ./db/Dockerfile
          push: true
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=local,src=/tmp/.cachebuild
          cache-to: type=local,dest=/tmp/.cachebuild-new

      - name: move updated docker cache
        run: |
          rm -rf /tmp/.cachebuild
          mv /tmp/.cachebuild-new /tmp/.cachebuild    

